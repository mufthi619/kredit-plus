// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/google/wire"
	"go.uber.org/zap"
	"kredit-plus/infra/mysql"
	"kredit-plus/infra/redis"
	"kredit-plus/internal/handler"
	"kredit-plus/internal/repository"
	"kredit-plus/internal/service"
)

// Injectors from wire.go:

func InitializeAssetHandler(db *mysql.Client, redisClient *redis.Client, logger *zap.Logger) (*handler.AssetHandler, error) {
	assetRepository := repository.NewAssetRepository(db, redisClient, logger)
	assetService := service.NewAssetService(assetRepository, logger)
	assetHandler := handler.NewAssetHandler(assetService, logger)
	return assetHandler, nil
}

func InitializeCustomerHandler(db *mysql.Client, redisClient *redis.Client, logger *zap.Logger) (*handler.CustomerHandler, error) {
	customerRepository := repository.NewCustomerRepository(db, redisClient, logger)
	customerService := service.NewCustomerService(customerRepository, logger)
	customerHandler := handler.NewCustomerHandler(customerService, logger)
	return customerHandler, nil
}

func InitializeCreditLimitHandler(db *mysql.Client, redisClient *redis.Client, logger *zap.Logger) (*handler.CreditLimitHandler, error) {
	creditLimitRepository := repository.NewCreditLimitRepository(db, logger)
	creditLimitService := service.NewCreditLimitService(creditLimitRepository, logger)
	creditLimitHandler := handler.NewCreditLimitHandler(creditLimitService, logger)
	return creditLimitHandler, nil
}

func InitializeTransactionProviderHandler(db *mysql.Client, redisClient *redis.Client, logger *zap.Logger) (*handler.TransactionHandler, error) {
	transactionRepository := repository.NewTransactionRepository(db, logger)
	customerRepository := repository.NewCustomerRepository(db, redisClient, logger)
	creditLimitRepository := repository.NewCreditLimitRepository(db, logger)
	assetRepository := repository.NewAssetRepository(db, redisClient, logger)
	transactionService := service.NewTransactionService(transactionRepository, customerRepository, creditLimitRepository, assetRepository, logger)
	transactionHandler := handler.NewTransactionHandler(transactionService, logger)
	return transactionHandler, nil
}

// wire.go:

var (
	AssetSet = wire.NewSet(repository.NewAssetRepository, service.NewAssetService, handler.NewAssetHandler)

	CustomerSet = wire.NewSet(repository.NewCustomerRepository, service.NewCustomerService, handler.NewCustomerHandler)

	CreditLimitSet = wire.NewSet(repository.NewCreditLimitRepository, service.NewCreditLimitService, handler.NewCreditLimitHandler)

	TransactionProviderSet = wire.NewSet(repository.NewTransactionRepository, repository.NewCustomerRepository, repository.NewCreditLimitRepository, repository.NewAssetRepository, service.NewTransactionService, handler.NewTransactionHandler)

	DomainSet = wire.NewSet(
		AssetSet,
		CustomerSet,
		CreditLimitSet,
		TransactionProviderSet,
	)
)
